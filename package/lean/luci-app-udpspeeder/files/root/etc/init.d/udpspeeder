#!/bin/sh /etc/rc.common

START=88
STOP=15
USE_PROCD=1

NAME=udpspeeder

_log() {
	logger -p "daemon.$1" -t "$NAME" "$2"
}

has_valid_server() {
	local server
	for server in $@; do
		[ "$(uci_get $NAME $server)" = "servers" ] && return 0
	done
	return 1
}

validate_config_section() {
	uci_validate_section "$NAME" general "$1" \
		'server:uciname' \
		'daemon_user:string:root'
}

validate_server_section() {
	uci_validate_section "$NAME" servers "$1" \
		'server_addr:host' \
		'server_port:port:8080' \
		'listen_addr:ipaddr:127.0.0.1' \
		'listen_port:port:2080' \
		'key:string' \
		'fec:string:20:10' \
		'mode:or("0", "1"):0' \
		'timeout:uinteger' \
		'mtu:range(0,2000)' \
		'queue_len:uinteger' \
		'jitter:uinteger' \
		'interval:uinteger' \
		'random_drop:range(0,10000)' \
		'disable_obscure:bool:0' \
		'out_addr:ipaddr' \
		'out_interface:string' \
		'log_level:range(0,6)'
}

start_instance() {
	local server="$1"

	if [ -z "$server" -o "$server" == "nil" ]; then
		return 0
	elif ! validate_server_section "$server"; then
		_log "err" "Server config validation failed."
		return 1
	fi

	/sbin/validate_data "ipaddr" "$server_addr" >/dev/null 2>&1
	[ $? -ne 0 ] && server_addr=$(nslookup "$server_addr" | \
		sed -n 's/^Address[[:space:]]*[0-9]*:[[:space:]]*\(\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}\)$/\1/p')
	if [ -z "$server_addr" ]; then
		_log "err" "Server address validation failed."
		return 1
	fi

	_log "info" "listening on: ${listen_addr}:${listen_port}"
	_log "info" "fec parameters: ${fec}"

	procd_open_instance
	procd_set_param command /usr/bin/speederv2
	procd_append_param command -c -l ${listen_addr}:${listen_port} -r ${server_addr}:${server_port} -f ${fec}
	[ -n "$key" ] && procd_append_param command -k ${key}
	[ -n "$mode" ] && procd_append_param command --mode ${mode} && _log "info" "mode: ${mode}"
	[ -n "$timeout" ] && procd_append_param command --timeout ${timeout}
	[ -n "$mtu" ] && procd_append_param command --mtu ${mtu}
	[ -n "$queue_len" ] && procd_append_param command -q ${queue_len}
	[ -n "$jitter" ] && procd_append_param command -j ${jitter}
	[ -n "$interval" ] && procd_append_param command -i ${interval}
	[ -n "$random_drop" ] && procd_append_param command --random-drop ${random_drop}
	[ $disable_obscure -eq 1 ] && procd_append_param command --disable-obscure
	[ -n "$out_addr" ] && procd_append_param command --out-addr ${out_addr}
	[ -n "$out_interface" ] && procd_append_param command --out-interface ${out_interface}
	[ -n "$log_level" ] && procd_append_param command --log-level ${log_level}
	procd_set_param respawn
	[ -n "$daemon_user" ] && procd_set_param user "$daemon_user" && _log "info" "running from ${daemon_user} user"
	procd_set_param pidfile "/var/run/${NAME}.${server}.pid"
	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}

start_service() {
	if ! validate_config_section "general" ; then
		_log "err" "Config validate failed."
		return 1
	fi
	has_valid_server $server || return 1
	for srv in $server; do
		start_instance $srv
	done
}
